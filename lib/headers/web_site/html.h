#ifndef WEB_SITE_HTML_H
#define WEB_SITE_HTML_H

const char html[] =
"<!DOCTYPE html>\n"
"<html lang=\"pt-br\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
"    <title>Estação Meteorológica</title>\n"
"\n"
"    \n"
"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n"
"\n"
"    <style>\n"
"        /* O CSS que definimos anteriormente continua o mesmo */\n"
"        body {\n"
"            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n"
"            background-color: #1A202C; color: #E2E8F0; margin: 0; padding: 0;\n"
"        }\n"
"        .container { max-width: 900px; margin: 0 auto; padding: 1rem; }\n"
"        h1 { font-size: 1.875rem; font-weight: 700; margin-bottom: 1rem; color: #FFFFFF; text-align: center; }\n"
"        h2 { font-size: 1.25rem; font-weight: 600; margin-top: 0; margin-bottom: 1rem; color: #4FD1C5; border-bottom: 1px solid #4A5568; padding-bottom: 0.5rem; }\n"
"        .card { background-color: #2D3748; padding: 1.5rem; border-radius: 0.5rem; margin-top: 1rem; border: 1px solid #4A5568; }\n"
"        .card p { margin: 0.75rem 0; line-height: 1.5; font-size: 1rem; }\n"
"        .data-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; }\n"
"        .form-container { display: flex; align-items: flex-end; gap: 1rem; flex-wrap: wrap; }\n"
"        .form-group { flex: 1; min-width: 150px; }\n"
"        label { display: block; font-size: 0.875rem; margin-bottom: 0.5rem; }\n"
"        input[type='number'] { width: 100%; box-sizing: border-box; background-color: #1A202C; color: #E2E8F0; border: 1px solid #4A5568; border-radius: 0.25rem; padding: 0.5rem; }\n"
"        input[type='number']:focus { outline: none; border-color: #4FD1C5; }\n"
"        button { background-color: #4FD1C5; color: #1A202C; padding: 0.5rem 1rem; border-radius: 0.25rem; border: none; font-weight: 700; cursor: pointer; transition: background-color 0.2s ease-in-out; }\n"
"        button:hover { background-color: #81E6D9; }\n"
"        .status-message { margin-top: 1rem; font-weight: 500; }\n"
"        .chart-container { position: relative; height: 250px; width: 100%; }\n"
"        @media (max-width: 768px) { .data-grid { grid-template-columns: 1fr; } }\n"
"    </style>\n"
"</head>\n"
"<body>\n"
"    <div class=\"container\">\n"
"        <h1>Estação Meteorológica</h1>\n"
"\n"
"        \n"
"        <div class=\"data-grid\">\n"
"            <div class=\"card\">\n"
"                <h2>Dados Atuais</h2>\n"
"                <p><strong>Temperatura BMP280:</strong> <span id=\"temp_bmp\">--</span> &deg;C</p>\n"
"                <p><strong>Temperatura AHT20:</strong> <span id=\"temp_aht\">--</span> &deg;C</p>\n"
"                <p><strong>Umidade:</strong> <span id=\"humidity\">--</span> %</p>\n"
"                <p><strong>Altitude:</strong> <span id=\"altitude\">--</span> m</p>\n"
"                <p><strong>Bomba:</strong> <span id=\"pump\">--</span></p>\n"
"            </div>\n"
"            <div class=\"card\">\n"
"                <h2>Configurar Alerta Laranja</h2>\n"
"                <div class=\"form-container\">\n"
"                    <div class=\"form-group\">\n"
"                        <label for=\"orange_min_input\">Mínimo (%):</label>\n"
"                        <input type=\"number\" id=\"orange_min_input\" step=\"0.1\" min=\"0\" max=\"100\">\n"
"                    </div>\n"
"                    <div class=\"form-group\">\n"
"                        <label for=\"orange_max_input\">Máximo (%):</label>\n"
"                        <input type=\"number\" id=\"orange_max_input\" step=\"0.1\" min=\"0\" max=\"100\">\n"
"                    </div>\n"
"                    <button onclick=\"setLimits()\">Atualizar</button>\n"
"                </div>\n"
"                <p>Mínimo Atual: <span id=\"orange_min\">--</span> %</p>\n"
"                <p>Máximo Atual: <span id=\"orange_max\">--</span> %</p>\n"
"                <p id=\"status\" class=\"status-message\"></p>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        \n"
"        <div class=\"card\">\n"
"            <h2>Gráficos em Tempo Real</h2>\n"
"            <div class=\"data-grid\">\n"
"                <div>\n"
"                    <h3>Temperatura (&deg;C)</h3>\n"
"                    <div class=\"chart-container\"><canvas id=\"temperatureChart\"></canvas></div>\n"
"                </div>\n"
"                <div>\n"
"                    <h3>Umidade (%)</h3>\n"
"                    <div class=\"chart-container\"><canvas id=\"humidityChart\"></canvas></div>\n"
"                </div>\n"
"                <div>\n"
"                    <h3>Altitude (m)</h3>\n"
"                    <div class=\"chart-container\"><canvas id=\"altitudeChart\"></canvas></div>\n"
"                </div>\n"
"            </div>\n"
"        </div>\n"
"    </div>\n"
"\n"
"    \n"
"    <script>\n"
"        const MAX_DATA_POINTS = 20; // Número máximo de pontos no gráfico\n"
"        let tempChart, humidityChart, altitudeChart;\n"
"\n"
"        // Função para criar um novo gráfico\n"
"        function createChart(elementId, label, borderColor) {\n"
"            const ctx = document.getElementById(elementId).getContext('2d');\n"
"            return new Chart(ctx, {\n"
"                type: 'line',\n"
"                data: {\n"
"                    labels: [],\n"
"                    datasets: [{\n"
"                        label: label,\n"
"                        data: [],\n"
"                        borderColor: borderColor,\n"
"                        backgroundColor: borderColor + '33', // Cor com transparência\n"
"                        borderWidth: 2,\n"
"                        fill: true,\n"
"                        tension: 0.3\n"
"                    }]\n"
"                },\n"
"                options: {\n"
"                    responsive: true,\n"
"                    maintainAspectRatio: false,\n"
"                    scales: {\n"
"                        y: { beginAtZero: false },\n"
"                        x: { ticks: { display: false } } // Oculta os labels do eixo X\n"
"                    },\n"
"                    plugins: { legend: { display: false } }\n"
"                }\n"
"            });\n"
"        }\n"
"\n"
"        // Função para adicionar dados a um gráfico\n"
"        function addDataToChart(chart, label, data) {\n"
"            chart.data.labels.push(label);\n"
"            chart.data.datasets[0].data.push(data);\n"
"\n"
"            // Remove o ponto mais antigo se exceder o limite\n"
"            if (chart.data.labels.length > MAX_DATA_POINTS) {\n"
"                chart.data.labels.shift();\n"
"                chart.data.datasets[0].data.shift();\n"
"            }\n"
"            chart.update();\n"
"        }\n"
"\n"
"        // Função para buscar dados e atualizar a página\n"
"        function updateData() {\n"
"            fetch('/dados')\n"
"                .then(response => response.json())\n"
"                .then(data => {\n"
"                    // Atualiza os textos\n"
"                    document.getElementById('temp_bmp').textContent = data.temperatura_bmp.toFixed(1);\n"
"                    document.getElementById('temp_aht').textContent = data.temperatura_aht.toFixed(1);\n"
"                    document.getElementById('humidity').textContent = data.umidade.toFixed(1);\n"
"                    document.getElementById('altitude').textContent = data.altitude.toFixed(0);\n"
"                    document.getElementById('pump').textContent = data.bomba ? 'Ligada' : 'Desligada';\n"
"                    document.getElementById('orange_min').textContent = data.orange_min.toFixed(1);\n"
"                    document.getElementById('orange_max').textContent = data.orange_max.toFixed(1);\n"
"\n"
"                    // Atualiza os gráficos\n"
"                    const now = new Date().toLocaleTimeString();\n"
"                    addDataToChart(tempChart, now, data.temperatura_aht);\n"
"                    addDataToChart(humidityChart, now, data.umidade);\n"
"                    addDataToChart(altitudeChart, now, data.altitude);\n"
"                })\n"
"                .catch(error => console.error('Erro ao atualizar dados:', error));\n"
"        }\n"
"\n"
"        // Função para configurar os limites do alerta\n"
"        function setLimits() {\n"
"            // (A função setLimits continua a mesma de antes)\n"
"            const min = parseFloat(document.getElementById('orange_min_input').value);\n"
"            const max = parseFloat(document.getElementById('orange_max_input').value);\n"
"            const statusEl = document.getElementById('status');\n"
"            if (isNaN(min) || isNaN(max) || min < 0 || max > 100 || min >= max) {\n"
"                statusEl.textContent = 'Erro: Insira valores válidos (0 <= min < max <= 100)';\n"
"                statusEl.style.color = '#F56565';\n"
"                return;\n"
"            }\n"
"            fetch('/set_orange_limits', {\n"
"                method: 'POST',\n"
"                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n"
"                body: `orange_min=${min}&orange_max=${max}`\n"
"            })\n"
"            .then(response => {\n"
"               if(response.ok) {\n"
"                  statusEl.textContent = 'Limites atualizados com sucesso!';\n"
"                  statusEl.style.color = '#48BB78';\n"
"                  updateData();\n"
"               } else { throw new Error('Falha na resposta do servidor.'); }\n"
"            })\n"
"            .catch(error => {\n"
"                statusEl.textContent = 'Erro ao enviar os dados.';\n"
"                statusEl.style.color = '#F56565';\n"
"                console.error('Erro:', error);\n"
"            });\n"
"        }\n"
"\n"
"        // Inicializa tudo quando a página carrega\n"
"        window.onload = function() {\n"
"            tempChart = createChart('temperatureChart', 'Temperatura AHT20', '#F56565'); // Vermelho\n"
"            humidityChart = createChart('humidityChart', 'Umidade', '#4FD1C5'); // Ciano\n"
"            altitudeChart = createChart('altitudeChart', 'Altitude', '#63B3ED'); // Azul\n"
"            updateData(); // Busca os primeiros dados\n"
"            setInterval(updateData, 2000); // Define a atualização automática\n"
"        }\n"
"    </script>\n"
"</body>\n"
"</html>";

#endif // WEB_SITE_HTML_H